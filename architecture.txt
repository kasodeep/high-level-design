Server: 
	A server is a never ending process running on a computer that provides resources, data, services, or programs to other computers, known as clients, over a network.

Client: 
	Anyone who is requesting a piece of information or data is called a client. Usually they request it from server.

Latency:
	It is defined as the time to do work.
	Also known as the Round Trip Time.

Throughput:
	The amount of work done per unit time.
	The amount of request served per unit time.

	Why?:
		1. Performance Evaluation.
		2. Capacity Planning.
		3. Identifying Bottlenecks.

	How can I improve the throughput?:
		Related to latency, if we decrease the latency then the throughput increases.
		1. Scaling.
		2. Optimized Code.
		3. Caching.
		4. Network Optimization.
		5. Parallel Processing.

Monolithic:
	It is a system where there is a single code base. Every piece of code is on the same machine.
	All of the services are grouped together with a single machine.

	Ex: Web App -> Front-end, Back-end, Database.

	Use Cases/ Advantages:
		1. When we are starting out building our application and we don't know what to do, we should use monolithic architecture.

		2. Latency Sensitive:
			If we want the app to be very responsive then use monolithic, cause communication over network is very time consuming.

		3. Easy to secure and it is less expensive. (Ex: Tesla)

		4. Since the app have fixed boundaries it is easy to test the application, functionality and integration.

	Challenges:
		1. Scaling has it's complexities.
			Ex: If there is a application which is read heavy, then horizontal scaling would lead to wastage of database and back-end resources.

		2. Single Repository:
			The developers are dependent on each other and there is:
				Less Flexibility.
				Human Conflicts.
				Slower time to Production.

		3. Unity in Tech Stack:
			We cannot have a java back-end along with react front-end since it needs to be deployed together.
			Ex: JSP

		4. Deployment Time:
			If we change one line of CSS in the front-end then the whole app needs to be re-deployed and hence it increases the downtime of the system.

		5. There is a possibility of single point of failure.


SOA(Service Oriented Architecture);
	It tells to make the system as granular as possible. Basically dividing different services.

	Use Cases/ Advantages:
		1. Selective Scaling.

		2. Flexible Tech Stack.
		
		3. Loosely Coupled:
			This provides high flexibility & reduces time to production.

		4. Changes in one service cannot affect other services.

		5. No single point of failure.

	Challenges:
		1. Latency:
			There is an increase in the latency due to communication over network which is one of the slowest.

		2. Security:
			It becomes more complex to maintain the integrity and hence it's too expensive.

		3.Testing:
			It became super complex when Instagram was tested by Facebook over a system of distributed testing.

Micro services:
	It is more granular and stricter version of the SOA.
	The soa might allow two services to have the same database, but in micro-services each service must have it's own resources.

	Challenges:
		Expense:
			Since we cannot share the resources, it is highly cost oriented.
