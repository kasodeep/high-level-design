Database:
	It a an actual physical layer where the data is stored in memory.

File Based System:
	Originally, we have file based systems where the data was actually stored on files.
	There were only programming languages to manipulate the files and store/retrieve data.

	Challenges:
		1. Data Redundancy:
			There were always CRUD anomalies associated with the file based systems, as we were unable to search for data.
			Ex: We might two copies of data for Raul, and return the old one while querying.

		2. Security Issue:
			The only security to the files was provided by the OS and we cannot add an additional authentication layer.

		3. Ease of Use:
			The programming languages were hard and a normal user would not have been able to use the system.

Database Management Systems (DBMS):
	We have added a management layer around the database which will communicate to the actual database.
	
	This layer will be the only way we can access the database using simple SQL language which is easy to use & manipulate.
	
	The layer also allows us to add extra security and authentication 
	to who actually can use the data.

	Ex: MySQL, Oracle, MongoDB.

Relational Database Management System (RDBMS):
	Each of the entities are represented by tables and have attributes which define them. (Usually Noun)
	The entities are related to each other by relationships and hence have a concept of Foreign Key. (Verb)

SQL Systems:
	The main features of an RDBMS are as follows:
		1. Normalization:
			We need to normalize the database schema before we can store the actual data on the database.
			Normalization tells that each entity must have a separate table.
			Ex: 1NF, 2NF, 3NF, BCNF.

		2. Transactions:
			They support strong transnational capacity.
			A transaction is a set of operations which are performed on the database sequentially.
			
			It follows ACID property:
				Atomicity: 
					Either all or nothing.
				Consistency: 
					The transaction must bring the the database from one valid state to another.
				Isolation:
					Executing transactions concurrently results in the same state as executing them serially.
				Durability: 
					The changes made by the transactions must persist in the database.

	Use Cases:
		1. Structured Data.
		2. Fixed Schema.
		3. Transactions Required.

	Challenges:
		1. Tables:
			Only structured data and fixed columns are allowed.
		2. Join:
			When we try to join two tables over a network it is an expensive operation.
		3. Scalability Issues:
			If we separate the tables into different machines the, query performance will definitely go down.

Master Slave Replication:
	The master is used to only write the data, and replicates the data onto the slaves.
	The slaves are used as readers which can only be queried.
	In case of failure, one of the slave is promoted as a master.

Master Master Replication:
	All of the machines are masters and replicate the data among each other.
	We will need a load balancer and logic to decide where to write the data.
	They either violate ACID or have increased write latency due to synchronization.

NoSQL Databases:
	They can be described by BASE:
		1. Basically Available:
			The system is always available.
		2. Soft State:
			The state of the system changes over time even without input.
		3. Eventual Consistency:
			The system will become consistent over a period of time.

	1. Key Value Pairs: Redis
		The have basically O(1) response time when we have the keys.
		They are mostly used as a cache database to avoid db querying.

	2. Documents: MongoDB
		It brings the best of the both worlds.
		It supports transactions and structuring to some extent.
		It also allows dynamic schema and scaling efficiently.

		RDBMS vs Document DB
		Tables -> Collections
		Rows -> Document
		Columns -> Fields

	3. Columnar: Cassandra
		At the base level it stored the data as columns, unlike traditional RDBMS which store the data of a single row together.

		Advantages:
			1. Fast Aggregation.
			2. Better Compaction.
			3. At Scale fast read/write.

	4. Graph Database: Neo4J
			When there are complex and hierarchical relationships we try to use the graph database.
			They are still evolving.
			Fun Fact: I am a certified graph database developer.

Database Optimizations:
	1. Indexing:
		We need to identify the column by which we filter the database.
		Then create a new data item also knows as B-trees which are sorted and contain pointers to the block of memory.
		They are used for read heavy applications.

		Dis-Advantages:
			1. More Space.
			2. If the app is write heavy worst performance.

	2. Partitioning/Sharding:
		Suppose we have a sales table with id, data, country.
		It contains billions of records and hence they cannot be stored on a single table.

		Part..:
			Divide the table into different parts let's say by countries and then we would be able to store them on a single machine.

		Shar..:
			Store the divisions by country separately on different machines.

		Types:
			1. Range Based Partitioning:
				Let's say we have table for 24 hour sales data, then we separate them by 0-6, 6-16, 16-24.

			2. List Based Partitioning:
				The table might be separated based on the pin-code to which list the entry belongs to.

			3. Hashed Based Partitioning:
				Fix the number of partitions and apply some kind of hashing function to store the data.